{"name":"formattable","tagline":"Formattable Data Structures","body":"# formattable\r\n\r\n[![Travis-CI Build Status](https://travis-ci.org/renkun-ken/formattable.png?branch=master)](https://travis-ci.org/renkun-ken/formattable) [![Coverage Status](https://coveralls.io/repos/renkun-ken/formattable/badge.svg)](https://coveralls.io/r/renkun-ken/formattable) [![Issue Stats](http://issuestats.com/github/renkun-ken/formattable/badge/issue?style=flat)](http://issuestats.com/github/renkun-ken/formattable) [![Issue Stats](http://issuestats.com/github/renkun-ken/formattable/badge/pr?style=flat)](http://issuestats.com/github/renkun-ken/formattable)\r\n\r\nThis package is designed for applying formatting on vectors and data frames to make data presentation easier, richer, more flexible and hopefully convey more information.\r\n\r\n**This package is still on an initial stage. The APIs may change without notice.**\r\n\r\n## Install\r\n\r\nCurrently, the package is only available on GitHub.\r\n\r\n```r\r\n# install.packages(\"devtools\")\r\ndevtools::install_github(\"renkun-ken/formattable\")\r\n```\r\n\r\n## Introduction\r\n\r\nAtomic vectors are basic units to store data. Some data can be read more easily with formatting. A numeric vector, for example, stores a group of percentage numbers yet still shows in the form of typical floating numbers. This package provides functions to create data structures with predefined formatting rules so that these objects stores the original data but are printed with formatting.\r\n\r\nThe package provides several typical formattable objects such as `percent`, `comma`, `currency`, `accounting` and `scientific`. These objects are essentially numeric vectors with pre-defined formatting rules and parameters. For example,\r\n\r\n\r\n```r\r\nlibrary(formattable)\r\np <- percent(c(0.1, 0.02, 0.03, 0.12))\r\np\r\n```\r\n\r\n```\r\n## [1] 10.00% 2.00%  3.00%  12.00%\r\n```\r\n\r\nThe percent vector is no different from a numeric vector but has a percentage representation as being\r\nprinted. It works with arithmetic operations and common functions and preserves its formatting.\r\n\r\n\r\n```r\r\np + 0.05\r\n```\r\n\r\n```\r\n## [1] 15.00% 7.00%  8.00%  17.00%\r\n```\r\n\r\n```r\r\nmax(p)\r\n```\r\n\r\n```\r\n## [1] 12.00%\r\n```\r\n\r\n\r\n```r\r\nbalance <- accounting(c(1000, 500, 200, -150, 0, 1200))\r\nbalance\r\n```\r\n\r\n```\r\n## [1] 1,000.00 500.00   200.00   (150.00) 0.00     1,200.00\r\n```\r\n\r\n```r\r\nbalance + 1000\r\n```\r\n\r\n```\r\n## [1] 2,000.00 1,500.00 1,200.00 850.00   1,000.00 2,200.00\r\n```\r\n\r\nThese functions are special cases of what `formattable()` can do, which applies highly customizable formatting to objects of a wide range of classes like `numeric`, `logical`, `factor`, `Date`, `data.frame`, etc. A typical data frame can look more friendly with `formattable` column vectors. For example,\r\n\r\n\r\n```r\r\np <- data.frame(\r\n  id = c(1, 2, 3, 4, 5), \r\n  name = c(\"A1\", \"A2\", \"B1\", \"B2\", \"C1\"),\r\n  balance = accounting(c(52500, 36150, 25000, 18300, 7600), format = \"d\"),\r\n  growth = percent(c(0.3, 0.3, 0.1, 0.15, 0.15), format = \"d\"),\r\n  ready = formattable(c(TRUE, TRUE, FALSE, FALSE, TRUE), \"yes\", \"no\"))\r\np\r\n```\r\n\r\n```\r\n##   id name balance growth ready\r\n## 1  1   A1  52,500    30%   yes\r\n## 2  2   A2  36,150    30%   yes\r\n## 3  3   B1  25,000    10%    no\r\n## 4  4   B2  18,300    15%    no\r\n## 5  5   C1   7,600    15%   yes\r\n```\r\n\r\n## Formatting tables in dynamic document\r\n\r\nIn a typical workflow of dynamic document production, [knitr](https://github.com/yihui/knitr) and [rmarkdown](http://rmarkdown.rstudio.com/) are powerful tools to render documents with R code to different types of portable documents.\r\n\r\nknitr is able to render an RMarkdown document (markdown document with R code chunks) to Markdown document. rmarkdown calls [pandoc](http://johnmacfarlane.net/pandoc) to render a markdown document to HTML web page. To put a table (`data.frame` in R) on the page, one may call `knitr::kable` to produce its markdown representation. By default the resulted table is in a plain theme with no additional formatting. However, in some cases, additional formatting may help clarify the information and make contrast of the data. This package provides functions to produce formatted tables in dynamic documents.\r\n\r\n\r\n```r\r\ndf <- data.frame(\r\n  id = 1:10,\r\n  name = c(\"Bob\", \"Ashley\", \"James\", \"David\", \"Jenny\", \r\n    \"Hans\", \"Leo\", \"John\", \"Emily\", \"Lee\"), \r\n  age = c(28, 27, 30, 28, 29, 29, 27, 27, 31, 30),\r\n  grade = c(\"C\", \"A\", \"A\", \"C\", \"B\", \"B\", \"B\", \"A\", \"C\", \"C\"),\r\n  test1_score = c(8.9, 9.5, 9.6, 8.9, 9.1, 9.3, 9.3, 9.9, 8.5, 8.6),\r\n  test2_score = c(9.1, 9.1, 9.2, 9.1, 8.9, 8.5, 9.2, 9.3, 9.1, 8.8),\r\n  final_score = c(9, 9.3, 9.4, 9, 9, 8.9, 9.25, 9.6, 8.8, 8.7),\r\n  registered = c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE),\r\n  stringsAsFactors = FALSE)\r\n```\r\n\r\nPlain table:\r\n\r\n\r\n| id|name   | age|grade | test1_score| test2_score| final_score|registered |\r\n|--:|:------|---:|:-----|-----------:|-----------:|-----------:|:----------|\r\n|  1|Bob    |  28|C     |         8.9|         9.1|        9.00|TRUE       |\r\n|  2|Ashley |  27|A     |         9.5|         9.1|        9.30|FALSE      |\r\n|  3|James  |  30|A     |         9.6|         9.2|        9.40|TRUE       |\r\n|  4|David  |  28|C     |         8.9|         9.1|        9.00|FALSE      |\r\n|  5|Jenny  |  29|B     |         9.1|         8.9|        9.00|TRUE       |\r\n|  6|Hans   |  29|B     |         9.3|         8.5|        8.90|TRUE       |\r\n|  7|Leo    |  27|B     |         9.3|         9.2|        9.25|TRUE       |\r\n|  8|John   |  27|A     |         9.9|         9.3|        9.60|FALSE      |\r\n|  9|Emily  |  31|C     |         8.5|         9.1|        8.80|FALSE      |\r\n| 10|Lee    |  30|C     |         8.6|         8.8|        8.70|FALSE      |\r\n\r\nFormatted table with the following visualizations:\r\n\r\n* Ages are rendered in gradient.\r\n* All A grades are displayed in green bold.\r\n* `test1_score` and `test2_score` are indicated by horizontal bars and are background-colorized: white (low score) to pink (high score)\r\n* `final_score` shows score and ranking. Top 3 are green, and others are gray.\r\n* `registered` texts are transformed to an icon and yes/no text.\r\n\r\n\r\n```r\r\nlibrary(formattable)\r\nscore_bar <- formatter(\"span\", \r\n  style = x ~ style(\r\n    border.radius = \"4px\",\r\n    padding.right = \"4px\",\r\n    padding.left = sprintf(\"%.0fpx\", 6 + 54 * normalize(x)),\r\n    background = csscolor(gradient(x, \"white\", \"pink\"))\r\n  ))\r\n\r\nformattable(df, list(\r\n  age = formatter(\"span\", \r\n  style = x ~ style(\r\n    display = \"block\", \r\n    border.radius = \"4px\",\r\n    padding.right = \"4px\",\r\n    background = csscolor(gradient(x, \"white\", \"orange\")))),\r\n  grade = formatter(\"span\",\r\n    style = x ~ ifelse(x == \"A\", style(color = \"green\", font.weight = \"bold\"), NA)),\r\n  test1_score = score_bar,\r\n  test2_score = score_bar,\r\n  final_score = formatter(\"span\",\r\n    style = x ~ style(color = ifelse(rank(-x) <= 3, \"green\", \"gray\")),\r\n    x ~ sprintf(\"%.2f (rank: %02d)\", x, rank(-x))),\r\n  registered = formatter(\"span\", \r\n    style = x ~ style(color = ifelse(x, \"green\", \"red\")),\r\n    x ~ icontext(ifelse(x, \"ok\", \"remove\"), ifelse(x, \"Yes\", \"No\")))\r\n))\r\n```\r\n\r\n![formattable](https://raw.githubusercontent.com/renkun-ken/formattable/master/formattable.png)\r\n\r\n**The icon set used in the table is by [GLYPHICONS.com](http://GLYPHICONS.com) and included in [Bootstrap](http://getbootstrap.com/components/#glyphicons).**\r\n\r\n## License\r\n\r\nThis package is under [MIT License](http://opensource.org/licenses/MIT).\r\n","google":"UA-47159422-1","note":"Don't delete this file! It's used internally to help with page regeneration."}